(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{500:function(a,t,e){"use strict";e.r(t);var v=e(4),s=Object(v.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"强制缓存-也叫强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存-也叫强缓存"}},[a._v("#")]),a._v(" 强制缓存 (也叫强缓存)")]),a._v(" "),e("p",[a._v("强制缓存的含义是，当客户端请求后，会先访问缓存数据库看缓存是否存在。如果存在则直接返回；不存在则请求真的服务器，响应后再写入缓存数据库。")]),a._v(" "),e("h3",{attrs:{id:"强制缓存直接减少请求数-是提升最大的缓存策略。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存直接减少请求数-是提升最大的缓存策略。"}},[a._v("#")]),a._v(" 强制缓存直接减少请求数，是提升最大的缓存策略。")]),a._v(" "),e("p",[a._v("它的优化覆盖了文章开头提到过的请求数据的全部三个步骤。如果考虑使用缓存来优化网页性能的话，强制缓存应该是首先被考虑的。可以造成强制缓存的字段是 Cache-control 和 Expires。")]),a._v(" "),e("h3",{attrs:{id:"expires"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[a._v("#")]),a._v(" Expires")]),a._v(" "),e("p",[a._v("这是 HTTP 1.0 的字段，表示缓存到期时间，是一个绝对的时间 (当前时间+缓存时间)，如")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Expires: Thu, 10 Nov 2017 08:45:11 GMT\n")])])]),e("p",[a._v("在响应消息头中，设置这个字段之后，就可以告诉浏览器，在未过期之前不需要再次请求。")]),a._v(" "),e("p",[a._v("但是，这个字段设置时有两个缺点：")]),a._v(" "),e("p",[a._v("由于是绝对时间，用户可能会将客户端本地的时间进行修改，而导致浏览器判断缓存失效，重新请求该资源。此外，即使不考虑自信修改，时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效。\n写法太复杂了。表示时间的字符串多个空格，少个字母，都会导致非法属性从而设置失效。")]),a._v(" "),e("h3",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[a._v("#")]),a._v(" Cache-control")]),a._v(" "),e("p",[a._v("已知 Expires 的缺点之后，在 HTTP/1.1 中，增加了一个字段 Cache-control，该字段表示资源缓存的最大有效时间，在该时间内，客户端不需要向服务器发送请求")]),a._v(" "),e("p",[a._v("这两者的区别就是前者是绝对时间，而后者是相对时间。如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("Cache-control: max-age=2592000\n")])])]),e("p",[a._v("下面列举一些 Cache-control 字段常用的值：(完整的列表可以查看 MDN)")]),a._v(" "),e("ul",[e("li",[a._v("max-age：即最大有效时间，在上面的例子中我们可以看到")]),a._v(" "),e("li",[a._v("must-revalidate：如果超过了 max-age 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。")]),a._v(" "),e("li",[a._v("no-cache：虽然字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的对比来决定。")]),a._v(" "),e("li",[a._v("no-store: 真正意义上的“不要缓存”。所有内容都不走缓存，包括强制和对比。")]),a._v(" "),e("li",[a._v("public：所有的内容都可以被缓存 (包括客户端和代理服务器， 如 CDN)")]),a._v(" "),e("li",[a._v("private：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值。")])]),a._v(" "),e("p",[a._v("这些值可以混合使用，例如 Cache-control:public, max-age=2592000。")]),a._v(" "),e("p",[e("span",{staticClass:"red"},[e("strong",[a._v("这里有一个疑问：max-age=0 和 no-cache 等价吗？")])]),a._v("从规范的字面意思来说，max-age 到期是 应该(SHOULD) 重新验证，而 no-cache 是 必须(MUST) 重新验证。但实际情况以浏览器实现为准，大部分情况他们俩的行为还是一致的。（如果是 max-age=0, must-revalidate 就和 no-cache 等价了）")]),a._v(" "),e("p",[a._v("顺带一提，在 HTTP/1.1 之前，如果想使用 no-cache，通常是使用 Pragma 字段，如 Pragma: no-cache(这也是 Pragma 字段唯一的取值)。但是这个字段只是浏览器约定俗成的实现，并没有确切规范，因此缺乏可靠性。它应该只作为一个兼容字段出现，在当前的网络环境下其实用处已经很小。")]),a._v(" "),e("p",[a._v("总结一下，自从 HTTP/1.1 开始，Expires 逐渐被 Cache-control 取代。Cache-control 是一个相对时间，即使客户端时间发生改变，相对时间也不会随之改变，这样可以保持服务器和客户端的时间一致性。而且 Cache-control 的可配置性比较强大。")]),a._v(" "),e("p",[a._v("Cache-control 的优先级高于 Expires，为了兼容 HTTP/1.0 和 HTTP/1.1，实际项目中两个字段我们都会设置。")]),a._v(" "),e("h2",{attrs:{id:"对比缓存-也叫协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对比缓存-也叫协商缓存"}},[a._v("#")]),a._v(" 对比缓存 (也叫协商缓存)")]),a._v(" "),e("p",[a._v("当强制缓存失效(超过规定时间)时，就需要使用对比缓存，由服务器决定缓存内容是否失效。")]),a._v(" "),e("p",[a._v("流程上说，浏览器先请求缓存数据库，返回一个缓存标识。之后浏览器拿这个标识和服务器通讯。如果缓存未失效，则返回 HTTP 状态码 304 表示继续使用，于是客户端继续使用缓存；如果失效，则返回新的数据和缓存规则，浏览器响应数据后，再把规则写入到缓存数据库。")]),a._v(" "),e("p",[e("span",{staticClass:"green"},[e("strong",[a._v("对比缓存在请求数上和没有缓存是一致的。")])]),a._v("但如果是 304 的话，返回的仅仅是一个状态码而已，并没有实际的文件内容，因此 "),e("span",{staticClass:"green"},[e("strong",[a._v("在响应体体积上的节省是它的优化点。")])]),a._v("它的优化覆盖了文章开头提到过的请求数据的三个步骤中的最后一个：“响应”。通过减少响应体体积，来缩短网络传输时间。所以和强制缓存相比提升幅度较小，但总比没有缓存好。")]),a._v(" "),e("p",[a._v("对比缓存是可以和强制缓存一起使用的，作为在强制缓存失效后的一种后备方案。实际项目中他们也的确经常一同出现。")]),a._v(" "),e("p",[a._v("对比缓存有 2 组字段(不是两个)：")]),a._v(" "),e("h3",{attrs:{id:"last-modified-if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[a._v("#")]),a._v(" Last-Modified & If-Modified-Since")]),a._v(" "),e("ul",[e("li",[a._v("服务器通过 Last-Modified 字段告知客户端，资源最后一次被修改的时间，例如\nLast-Modified: Mon, 10 Nov 2018 09:10:11 GMT")]),a._v(" "),e("li",[a._v("浏览器将这个值和内容一起记录在缓存数据库中。")]),a._v(" "),e("li",[a._v("下一次请求相同资源时时，浏览器从自己的缓存中找出“不确定是否过期的”缓存。因此在请求头中将上次的 Last-Modified 的值写入到请求头的 If-Modified-Since 字段")]),a._v(" "),e("li",[a._v("服务器会将 If-Modified-Since 的值与 Last-Modified 字段进行对比。如果相等，则表示未修改，响应 304；反之，则表示修改了，响应 200 状态码，并返回数据。")])]),a._v(" "),e("p",[a._v("但是他还是有一定缺陷的：")]),a._v(" "),e("ul",[e("li",[a._v("如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。")]),a._v(" "),e("li",[a._v("如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。")])]),a._v(" "),e("h3",{attrs:{id:"etag-if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[a._v("#")]),a._v(" Etag & If-None-Match")]),a._v(" "),e("p",[a._v("为了解决上述问题，出现了一组新的字段 Etag 和 If-None-Match")]),a._v(" "),e("p",[a._v("Etag 存储的是文件的特殊标识(一般都是 hash 生成的)，服务器存储着文件的 Etag 字段。之后的流程和 Last-Modified 一致，只是 Last-Modified 字段和它所表示的更新时间改变成了 Etag 字段和它所表示的文件 hash，把 If-Modified-Since 变成了 If-None-Match。服务器同样进行比较，命中返回 304, 不命中返回新资源和 200。")]),a._v(" "),e("h4",{attrs:{id:"etag-的优先级高于-last-modified"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-的优先级高于-last-modified"}},[a._v("#")]),a._v(" Etag 的优先级高于 Last-Modified")]),a._v(" "),e("comment")],1)}),[],!1,null,null,null);t.default=s.exports}}]);